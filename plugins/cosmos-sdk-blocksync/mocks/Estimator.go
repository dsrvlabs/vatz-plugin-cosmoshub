// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	common "github.com/dsrvlabs/vatz-plugin-common/rpc/cosmos"
	mock "github.com/stretchr/testify/mock"

	policy "github.com/dsrvlabs/vatz-plugin-common/plugins/cosmos-sdk-blocksync/policy"

	time "time"
)

// Estimator is an autogenerated mock type for the Estimator type
type Estimator struct {
	mock.Mock
}

// Estimate provides a mock function with given fields: history, timeWindow, maxBlockInterval
func (_m *Estimator) Estimate(history []*common.Status, timeWindow time.Duration, maxBlockInterval time.Duration) (policy.AlertStatus, error) {
	ret := _m.Called(history, timeWindow, maxBlockInterval)

	var r0 policy.AlertStatus
	if rf, ok := ret.Get(0).(func([]*common.Status, time.Duration, time.Duration) policy.AlertStatus); ok {
		r0 = rf(history, timeWindow, maxBlockInterval)
	} else {
		r0 = ret.Get(0).(policy.AlertStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*common.Status, time.Duration, time.Duration) error); ok {
		r1 = rf(history, timeWindow, maxBlockInterval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEstimator interface {
	mock.TestingT
	Cleanup(func())
}

// NewEstimator creates a new instance of Estimator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEstimator(t mockConstructorTestingTNewEstimator) *Estimator {
	mock := &Estimator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
