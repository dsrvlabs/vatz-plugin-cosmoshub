// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	common "github.com/dsrvlabs/vatz-plugin-common/rpc/cosmos"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Collector is an autogenerated mock type for the Collector type
type Collector struct {
	mock.Mock
}

// GetHistories provides a mock function with given fields:
func (_m *Collector) GetHistories() []*common.Status {
	ret := _m.Called()

	var r0 []*common.Status
	if rf, ok := ret.Get(0).(func() []*common.Status); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.Status)
		}
	}

	return r0
}

// Start provides a mock function with given fields: maxHistory, interval
func (_m *Collector) Start(maxHistory int, interval time.Duration) {
	_m.Called(maxHistory, interval)
}

// Stop provides a mock function with given fields:
func (_m *Collector) Stop() {
	_m.Called()
}

type mockConstructorTestingTNewCollector interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollector creates a new instance of Collector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollector(t mockConstructorTestingTNewCollector) *Collector {
	mock := &Collector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
